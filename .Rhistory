augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ -
(pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))
absY[j] <- abs(augPairDiff)
Xi[j,] <- colMeans(Xcart[which(matchedNumberCart ==
uMatchedSetsCart[j]),], na.rm=TRUE)
}
if (length(unique(absY))==2){absY <- factor(absY)}
colnames(Xi) <- colnames(Xcart)
#cartdf <- data.frame(rank(absY), Xi)
# factorVars <- colnames(Xi)[-2]  # all variables in XCART but age
# Xi[factorVars] <- lapply(Xi[factorVars], factor)
cartdf <- data.frame(absY, Xi)
# regress rank of |Y| on X
#emTree <- rpart(rank.absY.~., data=cartdf,
#control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),
#model = TRUE)
# regres |Y| on X
emTree <- rpart(absY~., data=cartdf,
control =rpart.control(minsplit =20,
#minbucket=round(minsplit/3),
cp=0.001,
maxdepth = 10),
model = TRUE)
} else {
Zcart=Z
Rcart=tableDF[c(i)]
Xcart=X
Dcart=D
matchedNumberCart = matchedNumber
# drop individuals who weren't matched
uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals
# get absolute treated-minus-control differences and covariate matrix
absY <- numeric(length(uMatchedSetsCart))
Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow =
length(uMatchedSetsCart)))
for (j in 1:length(uMatchedSetsCart)) {
pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]
pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]
pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]
augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ -
(pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))
absY[j] <- abs(augPairDiff)
Xi[j,] <- colMeans(Xcart[which(matchedNumberCart ==
uMatchedSetsCart[j]),], na.rm=TRUE)
}
if (length(unique(absY))==2){absY <- factor(absY)}
colnames(Xi) <- colnames(Xcart)
#cartdf <- data.frame(rank(absY), Xi)
# factorVars <- colnames(Xi)[-2]  # all variables in XCART but age
# Xi[factorVars] <- lapply(Xi[factorVars], factor)
cartdf <- data.frame(absY, Xi)
# regress rank of |Y| on X
#emTree <- rpart(rank.absY.~., data=cartdf,
#control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),
#model = TRUE)
# regres |Y| on X
emTree <- rpart(absY~., data=cartdf,
control =rpart.control(minsplit =20,
#minbucket=round(minsplit/3),
cp=0.001,
maxdepth = 10),
model = TRUE)
}
cartList[[i]] <- emTree
}
return(cartList)
}
##### ListCART: Run CART on abs(Y) on X from rpart on cp=0.0001 and maxdepth=2
### FUNCTION: outputs list of CART trees from rpart on cp=0.0001 and maxdepth=2
### INPUT: Z: instrument (n by 1 vector)
###        tableDF: data frame of the table of responses (n by r)
###        D: dose (n by 1 vector)
###        X: covariate matrix (n by p)
###        matchedNumber: matching vector from matching() function
###        null: the lambda_0 value in H0: lambda = lambda_0
### OUTPUT: list of CART trees from rpart on cp=0.0001 and maxdepth=2
ListCART4 = function(Z,tableDF,D,X,matchedNumber,null = 0){
if (class(tableDF) != "data.frame"){tableDF = as.data.frame(tableDF)}
tdfNA <- colnames(tableDF)[colSums(is.na(tableDF)) > 0]  # find which variables have missing values
varsWithNA <- tableDF %>% dplyr::select(tdfNA)  # select missing variables
# find rows where NA for outcome variable, get pair ID for those rows,
# ignore pairs associated with that ID
tdfNAid <- lapply(varsWithNA, function(x) which(is.na(x)))  # list of row indices of missingness
pairID <- lapply(tdfNAid, function(x) matchedNumber[x])  # list of pair IDs where at least one pair has missing outcome
idxPair <- lapply(pairID, function(x) which(matchedNumber %in% x))  # list of row indices of pairs corresponding to a missing outcome value
cartList <- list()
for (i in colnames(tableDF)) {
if (sum(is.na(tableDF[c(i)])) > 0){
Zcart=Z[-idxPair[[c(i)]]]
Dcart=D[-idxPair[[c(i)]]]
Rcart=tableDF[-idxPair[[c(i)]],c(i)]
Xcart=as.matrix(X[-idxPair[[c(i)]],])
matchedNumberCart = matchedNumber[-idxPair[[c(i)]]]
# drop individuals who weren't matched
uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals
# get absolute treated-minus-control differences and covariate matrix
absY <- numeric(length(uMatchedSetsCart))
Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow =
length(uMatchedSetsCart)))
check <- numeric(length(uMatchedSetsCart))
for (j in 1:length(uMatchedSetsCart)) {
check[j] <- length(which(matchedNumberCart==uMatchedSetsCart[j]))
pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]
pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]
pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]
augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ -
(pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))
absY[j] <- abs(augPairDiff)
Xi[j,] <- colMeans(Xcart[which(matchedNumberCart ==
uMatchedSetsCart[j]),], na.rm=TRUE)
}
if (length(unique(absY))==2){absY <- factor(absY)}
colnames(Xi) <- colnames(Xcart)
#cartdf <- data.frame(rank(absY), Xi)
# factorVars <- colnames(Xi)[-2]  # all variables in XCART but age
# Xi[factorVars] <- lapply(Xi[factorVars], factor)
cartdf <- data.frame(absY, Xi)
# regress rank of |Y| on X
#emTree <- rpart(rank.absY.~., data=cartdf,
#control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),
#model = TRUE)
# regres |Y| on X
emTree <- rpart(absY~., data=cartdf,
control =rpart.control(minsplit =20,
#minbucket=round(minsplit/3),
cp=0.0001,
maxdepth = 5),
model = TRUE)
} else {
Zcart=Z
Rcart=tableDF[c(i)]
Xcart=X
Dcart=D
matchedNumberCart = matchedNumber
# drop individuals who weren't matched
uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals
# get absolute treated-minus-control differences and covariate matrix
absY <- numeric(length(uMatchedSetsCart))
Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow =
length(uMatchedSetsCart)))
for (j in 1:length(uMatchedSetsCart)) {
pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]
pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]
pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]
augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ -
(pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))
absY[j] <- abs(augPairDiff)
Xi[j,] <- colMeans(Xcart[which(matchedNumberCart ==
uMatchedSetsCart[j]),], na.rm=TRUE)
}
if (length(unique(absY))==2){absY <- factor(absY)}
colnames(Xi) <- colnames(Xcart)
#cartdf <- data.frame(rank(absY), Xi)
# factorVars <- colnames(Xi)[-2]  # all variables in XCART but age
# Xi[factorVars] <- lapply(Xi[factorVars], factor)
cartdf <- data.frame(absY, Xi)
# regress rank of |Y| on X
#emTree <- rpart(rank.absY.~., data=cartdf,
#control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),
#model = TRUE)
# regres |Y| on X
emTree <- rpart(absY~., data=cartdf,
control =rpart.control(minsplit =20,
#minbucket=round(minsplit/3),
cp=0.0001,
maxdepth = 5),
model = TRUE)
}
cartList[[i]] <- emTree
}
return(cartList)
}
##### ListCART: Run CART on abs(Y) on X from rpart on cp=0.0001 and maxdepth=2
### FUNCTION: outputs list of CART trees from rpart on cp=0.0001 and maxdepth=2
### INPUT: Z: instrument (n by 1 vector)
###        tableDF: data frame of the table of responses (n by r)
###        D: dose (n by 1 vector)
###        X: covariate matrix (n by p)
###        matchedNumber: matching vector from matching() function
###        null: the lambda_0 value in H0: lambda = lambda_0
### OUTPUT: list of CART trees from rpart on cp=0.0001 and maxdepth=2
ListCART5 = function(Z,tableDF,D,X,matchedNumber,null = 0){
if (class(tableDF) != "data.frame"){tableDF = as.data.frame(tableDF)}
tdfNA <- colnames(tableDF)[colSums(is.na(tableDF)) > 0]  # find which variables have missing values
varsWithNA <- tableDF %>% dplyr::select(tdfNA)  # select missing variables
# find rows where NA for outcome variable, get pair ID for those rows,
# ignore pairs associated with that ID
tdfNAid <- lapply(varsWithNA, function(x) which(is.na(x)))  # list of row indices of missingness
pairID <- lapply(tdfNAid, function(x) matchedNumber[x])  # list of pair IDs where at least one pair has missing outcome
idxPair <- lapply(pairID, function(x) which(matchedNumber %in% x))  # list of row indices of pairs corresponding to a missing outcome value
cartList <- list()
for (i in colnames(tableDF)) {
if (sum(is.na(tableDF[c(i)])) > 0){
Zcart=Z[-idxPair[[c(i)]]]
Dcart=D[-idxPair[[c(i)]]]
Rcart=tableDF[-idxPair[[c(i)]],c(i)]
Xcart=as.matrix(X[-idxPair[[c(i)]],])
matchedNumberCart = matchedNumber[-idxPair[[c(i)]]]
# drop individuals who weren't matched
uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals
# get absolute treated-minus-control differences and covariate matrix
absY <- numeric(length(uMatchedSetsCart))
Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow =
length(uMatchedSetsCart)))
check <- numeric(length(uMatchedSetsCart))
for (j in 1:length(uMatchedSetsCart)) {
check[j] <- length(which(matchedNumberCart==uMatchedSetsCart[j]))
pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]
pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]
pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]
augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ -
(pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))
absY[j] <- abs(augPairDiff)
Xi[j,] <- colMeans(Xcart[which(matchedNumberCart ==
uMatchedSetsCart[j]),], na.rm=TRUE)
}
if (length(unique(absY))==2){absY <- factor(absY)}
colnames(Xi) <- colnames(Xcart)
#cartdf <- data.frame(rank(absY), Xi)
# factorVars <- colnames(Xi)[-2]  # all variables in XCART but age
# Xi[factorVars] <- lapply(Xi[factorVars], factor)
cartdf <- data.frame(absY, Xi)
# regress rank of |Y| on X
#emTree <- rpart(rank.absY.~., data=cartdf,
#control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),
#model = TRUE)
# regres |Y| on X
emTree <- rpart(absY~., data=cartdf,
control =rpart.control(minsplit =20,
#minbucket=round(minsplit/3),
cp=0.0001,
maxdepth = 4),
model = TRUE)
} else {
Zcart=Z
Rcart=tableDF[c(i)]
Xcart=X
Dcart=D
matchedNumberCart = matchedNumber
# drop individuals who weren't matched
uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals
# get absolute treated-minus-control differences and covariate matrix
absY <- numeric(length(uMatchedSetsCart))
Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow =
length(uMatchedSetsCart)))
for (j in 1:length(uMatchedSetsCart)) {
pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]
pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]
pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]
augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ -
(pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))
absY[j] <- abs(augPairDiff)
Xi[j,] <- colMeans(Xcart[which(matchedNumberCart ==
uMatchedSetsCart[j]),], na.rm=TRUE)
}
if (length(unique(absY))==2){absY <- factor(absY)}
colnames(Xi) <- colnames(Xcart)
#cartdf <- data.frame(rank(absY), Xi)
# factorVars <- colnames(Xi)[-2]  # all variables in XCART but age
# Xi[factorVars] <- lapply(Xi[factorVars], factor)
cartdf <- data.frame(absY, Xi)
# regress rank of |Y| on X
#emTree <- rpart(rank.absY.~., data=cartdf,
#control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),
#model = TRUE)
# regres |Y| on X
emTree <- rpart(absY~., data=cartdf,
control =rpart.control(minsplit =20,
#minbucket=round(minsplit/3),
cp=0.0001,
maxdepth = 4),
model = TRUE)
}
cartList[[i]] <- emTree
}
return(cartList)
}
##### ListCART: Run CART on abs(Y) on X from rpart on cp=0.0001 and maxdepth=2
### FUNCTION: outputs list of CART trees from rpart on cp=0.0001 and maxdepth=2
### INPUT: Z: instrument (n by 1 vector)
###        tableDF: data frame of the table of responses (n by r)
###        D: dose (n by 1 vector)
###        X: covariate matrix (n by p)
###        matchedNumber: matching vector from matching() function
###        null: the lambda_0 value in H0: lambda = lambda_0
### OUTPUT: list of CART trees from rpart on cp=0.0001 and maxdepth=2
ListCART6 = function(Z,tableDF,D,X,matchedNumber,null = 0){
if (class(tableDF) != "data.frame"){tableDF = as.data.frame(tableDF)}
tdfNA <- colnames(tableDF)[colSums(is.na(tableDF)) > 0]  # find which variables have missing values
varsWithNA <- tableDF %>% dplyr::select(tdfNA)  # select missing variables
# find rows where NA for outcome variable, get pair ID for those rows,
# ignore pairs associated with that ID
tdfNAid <- lapply(varsWithNA, function(x) which(is.na(x)))  # list of row indices of missingness
pairID <- lapply(tdfNAid, function(x) matchedNumber[x])  # list of pair IDs where at least one pair has missing outcome
idxPair <- lapply(pairID, function(x) which(matchedNumber %in% x))  # list of row indices of pairs corresponding to a missing outcome value
cartList <- list()
for (i in colnames(tableDF)) {
if (sum(is.na(tableDF[c(i)])) > 0){
Zcart=Z[-idxPair[[c(i)]]]
Dcart=D[-idxPair[[c(i)]]]
Rcart=tableDF[-idxPair[[c(i)]],c(i)]
Xcart=as.matrix(X[-idxPair[[c(i)]],])
matchedNumberCart = matchedNumber[-idxPair[[c(i)]]]
# drop individuals who weren't matched
uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals
# get absolute treated-minus-control differences and covariate matrix
absY <- numeric(length(uMatchedSetsCart))
Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow =
length(uMatchedSetsCart)))
check <- numeric(length(uMatchedSetsCart))
for (j in 1:length(uMatchedSetsCart)) {
check[j] <- length(which(matchedNumberCart==uMatchedSetsCart[j]))
pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]
pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]
pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]
augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ -
(pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))
absY[j] <- abs(augPairDiff)
Xi[j,] <- colMeans(Xcart[which(matchedNumberCart ==
uMatchedSetsCart[j]),], na.rm=TRUE)
}
if (length(unique(absY))==2){absY <- factor(absY)}
colnames(Xi) <- colnames(Xcart)
#cartdf <- data.frame(rank(absY), Xi)
# factorVars <- colnames(Xi)[-2]  # all variables in XCART but age
# Xi[factorVars] <- lapply(Xi[factorVars], factor)
cartdf <- data.frame(absY, Xi)
# regress rank of |Y| on X
#emTree <- rpart(rank.absY.~., data=cartdf,
#control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),
#model = TRUE)
# regres |Y| on X
emTree <- rpart(absY~., data=cartdf,
control =rpart.control(minsplit =20,
#minbucket=round(minsplit/3),
cp=0.0001,
maxdepth = 3),
model = TRUE)
} else {
Zcart=Z
Rcart=tableDF[c(i)]
Xcart=X
Dcart=D
matchedNumberCart = matchedNumber
# drop individuals who weren't matched
uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals
# get absolute treated-minus-control differences and covariate matrix
absY <- numeric(length(uMatchedSetsCart))
Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow =
length(uMatchedSetsCart)))
for (j in 1:length(uMatchedSetsCart)) {
pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]
pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]
pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]
augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ -
(pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))
absY[j] <- abs(augPairDiff)
Xi[j,] <- colMeans(Xcart[which(matchedNumberCart ==
uMatchedSetsCart[j]),], na.rm=TRUE)
}
if (length(unique(absY))==2){absY <- factor(absY)}
colnames(Xi) <- colnames(Xcart)
#cartdf <- data.frame(rank(absY), Xi)
# factorVars <- colnames(Xi)[-2]  # all variables in XCART but age
# Xi[factorVars] <- lapply(Xi[factorVars], factor)
cartdf <- data.frame(absY, Xi)
# regress rank of |Y| on X
#emTree <- rpart(rank.absY.~., data=cartdf,
#control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),
#model = TRUE)
# regres |Y| on X
emTree <- rpart(absY~., data=cartdf,
control =rpart.control(minsplit =20,
#minbucket=round(minsplit/3),
cp=0.0001,
maxdepth = 3),
model = TRUE)
}
cartList[[i]] <- emTree
}
return(cartList)
}
Vars <- c("cost_any_owe_12m", "health_good_12m", "health_not_poor_12m", "notbadday_phys")
dt <- dt_resp %>% dplyr::select(Vars)
D <- dt_resp$ohp_all_ever_firstn_30sep2009  # exposure/treatment
Z <- dt_resp$treatment # IV
dropsCART <- c('employ_1', 'employ_2', 'employ_3', 'employ_4',
'flp_1', 'flp_2', 'flp_3', 'flp_4', 'flp_5',
'ddddraXnum_2_2','ddddraXnum_2_3',
'ddddraXnum_3_2', 'ddddraXnum_3_3',
'ddddraXnum_4_2', 'ddddraXnum_4_3',
'ddddraXnum_5_2','ddddraXnum_5_3',
'ddddraXnum_6_2', 'ddddraXnum_6_3',
'ddddraXnum_7_2', 'ddddraXnum_7_3',
'llldraw_lot_2', 'llldraw_lot_3', 'llldraw_lot_4',
'llldraw_lot_5',  'llldraw_lot_6', 'llldraw_lot_7',
'llldraw_lot_8',
'employ_na', 'fpl_na')
XCART <- allX[ , !(names(allX) %in% dropsCART)]
tcart1 <- ListCART1(Z=Z,tableDF=dt,D=D,X=XCART,matchedNumber=pairmatchOHIEsurv, null = 0)
rpart.plot(tcart1[[6]])
rpart.plot(tcart6[[1]])
tcart6 <- ListCART6(Z=Z,tableDF=dt,D=D,X=XCART,matchedNumber=pairmatchOHIEsurv, null = 0)
rpart.output
??rpart.output
??rpart.object
rpart.plot(tcart6[[1]])
R
R <- dt_resp$cost_any_owe_12m
NAidR <- which(is.na(R))
NAidXhisp <- which(is.na(dt_resp$race_hisp_12m))
NAidXedu4 <- which(is.na(dt_resp$edu_4))
# pair IDs where at least one pair has missing outcome
pairIDR <- pairmatchOHIEsurv[NAidR]
pairIDXhisp <- pairmatchOHIEsurv[NAidXhisp]
pairIDXedu4 <- pairmatchOHIEsurv[NAidXedu4]
# row indices of pairs corresponding to a missing outcome value
idxPairR <- which(pairmatchOHIEsurv %in% pairIDR)
idxPairXhisp <- which(pairmatchOHIEsurv %in% pairIDXhisp)
idxPairXedu4 <- which(pairmatchOHIEsurv %in% pairIDXedu4)
# ignore (remove) pairs associated with a missing value
Rct <- R[-c(idxPairR, idxPairXhisp, idxPairXedu4)]
#Xct <- X[-c(idxPairR, idxPairXhisp, idxPairXedu4),]
Dct <- D[-c(idxPairR, idxPairXhisp, idxPairXedu4)]
Zct <- Z[-c(idxPairR, idxPairXhisp, idxPairXedu4)]
Xct <- XSurv[-c(idxPairR, idxPairXhisp, idxPairXedu4),]
matchedNumber <- pairmatchOHIEsurv[-c(idxPairR, idxPairXhisp, idxPairXedu4)]
tcart6[[1]]
tcart6[[1]]$where
pairLeafID <- tcart6[[1]]$where
pvalCT <- closedTest(pairLeafID = a, Z=Zct, R=Rct, D=Dct, X=as.matrix(Xct), matchedNumber = matchedNumber)
pvalCT <- closedTest(pairLeafID = pairLeafID, Z=Zct, R=Rct, D=Dct, X=as.matrix(Xct), matchedNumber = matchedNumber)
pvalCT
Zg1 <- Zct[which(matchedNumber %in% g1)]
Rg1 <- Rct[which(matchedNumber %in% g1)]
Dg1 <- Dct[which(matchedNumber %in% g1)]
Xg1 <- as.matrix(Xct[which(matchedNumber %in% g1),])
pairmatchg1 <- matchedNumber[which(matchedNumber %in% g1)]
h1Lambda <- estLambda(Z=Zg1,R=Rg1,D=Dg1,X=Xg1,pairmatchg1,null=null,alphaLevel=alphaLevel)
null=0; alphaLevel=0.05
edu4 <- dt_resp$edu_4[-c(idxPairR, idxPairXhisp, idxPairXedu4)]
hisp <- dt_resp$race_hisp_12m[-c(idxPairR, idxPairXhisp, idxPairXedu4)]
age55 <- if_else(dt_resp$age < 55, 1, 0)[-c(idxPairR, idxPairXhisp, idxPairXedu4)]
female <- dt_resp$female_list[-c(idxPairR, idxPairXhisp, idxPairXedu4)]
eng <- dt_resp$english_list[-c(idxPairR, idxPairXhisp, idxPairXedu4)]
uMatchedSets = unique(matchedNumber[!is.na(matchedNumber)])  # guarantee no unmatched individuals
g1 = numeric(length(uMatchedSets))  # english < .75 and race hisp < .75
g2 = numeric(length(uMatchedSets))  # english < .75 and race hisp >= .75
g3 = numeric(length(uMatchedSets))  # english >= .75, female >= .75, edu_4 < .25
g4 = numeric(length(uMatchedSets))  # english >= .75, female >= .75, edu_4 >= .25
g5 = numeric(length(uMatchedSets))  # english >= .75, female < .75, age < 55
g6 = numeric(length(uMatchedSets))  # english >= .75, female < .75, age >= 55
# split pairs into edu >= .75 and < .75
# eduyes <- numeric(length(uMatchedSets)); eduno <- numeric(length(uMatchedSets))
for(i in 1:length(uMatchedSets)) { # find which group a pair belongs
edug <- edu4[which(matchedNumber==uMatchedSets[i])]
age55g <- age55[which(matchedNumber==uMatchedSets[i])]
femaleg <- female[which(matchedNumber==uMatchedSets[i])]
engg <- eng[which(matchedNumber==uMatchedSets[i])]
hispg <- hisp[which(matchedNumber==uMatchedSets[i])]
# < .75 english and hispanic
if(mean(engg) == 0 & mean(hispg) == 0){g1[i] = uMatchedSets[i]}
# < .75 english and >=.75 hispanic
if(mean(engg) == 0 & mean(hispg) == 1){g2[i] = uMatchedSets[i]}
# >=.75 english and >=.75 female & <.25 edu
if(mean(engg) == 1 & mean(femaleg) == 1 & mean(edug)==0){g3[i] = uMatchedSets[i]}
# >=.75 english and >=.75 female & >=.25 edu
if(mean(engg) == 1 & mean(femaleg) == 1 & mean(edug)==1){g4[i] = uMatchedSets[i]}
# >=.75 english and <.75 female & <55 age (age55=1)
if(mean(engg) == 1 & mean(femaleg) == 0 & mean(age55g)==1){g5[i] = uMatchedSets[i]}
# >=.75 english and <.75 female & >=55 age (age55=0)
if(mean(engg) == 1 & mean(femaleg) == 0 & mean(age55g)==0){g6[i] = uMatchedSets[i]}
}
g1 <- g1[g1 != 0]
g2 <- g2[g2 != 0]
g3 <- g3[g3 != 0] # 10655
g4 <- g4[g4 != 0]
g5 <- g5[g5 != 0]
g6 <- g6[g6 != 0]
unique(pairLeafID)
g1
sum(pairLeafID==7)
length(g1)
length(g2)
length(g3)
length(g4)
length(g5)
length(g6)
length(g7)
sum(pairLeafID==4)
sum(pairLeafID==11)
sum(pairLeafID==5)
sum(pairLeafID==8)
sum(pairLeafID==10)
length(pairLeafID)
length(Rct)
length(Rct)/2
length(Zct)
length(g1) + length(g2) + length(g3) + length(g4) + length(g5) + length(g6)
length(R)
length(R)/2
sum(is.na(R))
(length(R)-290)/2
(length(R)-290-125)/2
(length(R)-290)/2 - 125
library(blogdown)
install.packages("blogdown")
library(blogdown)
blogdown::install_hugo()
blogdown::serve_site()
blogdown:::serve_site()
blogdown::update_hugo()
