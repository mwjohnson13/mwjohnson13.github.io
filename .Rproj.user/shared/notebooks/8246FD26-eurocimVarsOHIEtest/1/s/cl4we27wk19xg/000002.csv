"0","##### closedTest: perform closed testing from rpart output using estLambda function to test hypotheses"
"0","### FUNCTION: Outputs list of p-values from hypotheses formed from closed testing procedure"
"0","### INPUT: complianceRate: rate of compliance (scalar between 0 and 1)"
"0","###        nSims: number of simulations"
"0","###        betaAB: effect ratios for 4 possible groups from the 2 binary covariates (4 by 1 vector)"
"0","###        sigmaAB: standard deviation of error for 4 possible groups from the 2 binary covariates (4 by 1 vector)"
"0","###        sigmaAB needs to have same order as betaAB"
"0","###        I: number of pairs"
"0","###        alphaLevel: alpha level for the hypothesis tests"
"0","### OUTPUT: list of p-values where each entry corresponds to level of heirarchy in closed testing (beginning from lowest level, testing each group)"
"0","closedTest <- function(pairLeafID,Z,R,D,X,matchedNumber,"
"0","                       null = 0,alphaLevel = 0.05){"
"0","  nLeaves <- length(unique(pairLeafID))  # number of leaves"
"0","  groupID <- 1:nLeaves"
"0","  # nTest <- 0  # intialize number of ct tests conducted"
"0","  # for (i in 1:nLeaves){"
"0","  #   nTest <- nTest + choose(nLeaves,i)  # count up number of ct tests"
"0","  # }"
"0","  # "
"0","  # pCT <- numeric(nTest)  # initialize output vector of p-values"
"0","  pCT <- vector(""list"",nLeaves)"
"0","  idx <- 1"
"0","  for(i in nLeaves:1){  # starts from lowest level"
"0","    tests <- combn(nLeaves,i)  # tests for level i of closed test hierarchy"
"0","    pvals <- numeric(ncol(tests))  # initialize pvalue vector for tests"
"0","      "
"0","    # determine vector for tests that shouldn't be tested"
"0","    if(i < nLeaves) {  # check previous hierarchy if not first iteration"
"0","      "
"0","      ### when to ignore test:"
"0","      # pval > alphaLevel"
"0","      # ancestor of test was ignored (this is kept track of recursively here; by parents)"
"0","      if(sum(pCT[[idx-1]][[2]] >= alphaLevel) >= 1 | sum(ignoreTests) >= 1){  # did previous level accept any hypotheses"
"0","        acceptedIdx <- pCT[[idx-1]][[2]] > alphaLevel | ignoreTests # boolean of tests that have been accepted"
"0","        acceptedGrps <- unique(c(combn(nLeaves,i+1)[,acceptedIdx]))  # groups contained in accepted tests"
"0","        testVerify <- apply(tests, 2, function(x) sum(x %in% acceptedGrps))  # which tests of this level contain the groups that were accepted"
"0","        ignoreTests <- testVerify == nrow(tests)"
"0","      } else {"
"0","        ignoreTests <- numeric(ncol(tests))"
"0","      }"
"0","      "
"0","    } else {"
"0","      ignoreTests <- numeric(ncol(tests))"
"0","    }"
"0","    for(j in 1:ncol(tests)){"
"0","      # estLambda test"
"0","      groups <- unique(pairLeafID)[which(groupID %in% tests[,j])]  # determine which groups to pool for test"
"0","      poolGroup <- which(pairLeafID %in% groups)  # indices of pairs in pooled group"
"0","      idvGroup <- which(matchedNumber %in% poolGroup)  # indices of individuals in pooled group"
"0","      Rg <- R[idvGroup]  "
"0","      Zg <- Z[idvGroup]"
"0","      Dg <- D[idvGroup]"
"0","      Xg <- X[idvGroup]"
"0","      matchedNumberg <- matchedNumber[idvGroup]"
"0","      pvals[j] <- estLambda(Z=Zg,R=Rg,D=Dg,X=Xg,matchedNumber=matchedNumberg)[[3]]"
"0","    }"
"0","    sigpvals <- length(which(pvals <= alphaLevel & !ignoreTests))  # number of significant p-values that closed testing procedure accounts for"
"0","    pCT[[idx]] <- list(1-ignoreTests, pvals, sigpvals)  # list of outputs for loop i"
"0","    idx <- idx + 1"
"0","  }"
"0","  return(pCT)"
"0","  # pCT is list of lists where first item of the ith list is indicator vector for tests that should be tested by closed testing procedure"
"0","  # and second item is ith list is all p-values calculated"
"0","  # sigpvals is the count of significant p-vals that should be used following closed testing procedure"
"0","}"
"0","##### ListCART: Run CART on abs(Y) on X from rpart on cp=0.0001 and maxdepth=2"
"0","### FUNCTION: outputs list of CART trees from rpart on cp=0.0001 and maxdepth=2"
"0","### INPUT: Z: instrument (n by 1 vector)"
"0","###        tableDF: data frame of the table of responses (n by r)"
"0","###        D: dose (n by 1 vector)"
"0","###        X: covariate matrix (n by p)"
"0","###        matchedNumber: matching vector from matching() function"
"0","###        null: the lambda_0 value in H0: lambda = lambda_0"
"0","### OUTPUT: list of CART trees from rpart on cp=0.0001 and maxdepth=2"
"0","ListCART1 = function(Z,tableDF,D,X,matchedNumber,null = 0){"
"0","  "
"0","  if (class(tableDF) != ""data.frame""){tableDF = as.data.frame(tableDF)}"
"0","  "
"0","  "
"0","  tdfNA <- colnames(tableDF)[colSums(is.na(tableDF)) > 0]  # find which variables have missing values "
"0","  "
"0","  varsWithNA <- tableDF %>% dplyr::select(tdfNA)  # select missing variables"
"0","  "
"0","  # find rows where NA for outcome variable, get pair ID for those rows, "
"0","  # ignore pairs associated with that ID"
"0","  tdfNAid <- lapply(varsWithNA, function(x) which(is.na(x)))  # list of row indices of missingness"
"0","  pairID <- lapply(tdfNAid, function(x) matchedNumber[x])  # list of pair IDs where at least one pair has missing outcome"
"0","  idxPair <- lapply(pairID, function(x) which(matchedNumber %in% x))  # list of row indices of pairs corresponding to a missing outcome value"
"0","  "
"0","  cartList <- list()"
"0","  "
"0","  for (i in colnames(tableDF)) {"
"0","    if (sum(is.na(tableDF[c(i)])) > 0){"
"0","      Zcart=Z[-idxPair[[c(i)]]]"
"0","      Dcart=D[-idxPair[[c(i)]]]"
"0","      Rcart=tableDF[-idxPair[[c(i)]],c(i)]"
"0","      Xcart=as.matrix(X[-idxPair[[c(i)]],])"
"0","      matchedNumberCart = matchedNumber[-idxPair[[c(i)]]]"
"0","      "
"0","      # drop individuals who weren't matched"
"0","      uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals"
"0","      "
"0","      # get absolute treated-minus-control differences and covariate matrix"
"0","      absY <- numeric(length(uMatchedSetsCart))"
"0","      Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow ="
"0","                                length(uMatchedSetsCart)))"
"0","      for (j in 1:length(uMatchedSetsCart)) {"
"0","        pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ - "
"0","          (pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))"
"0","        absY[j] <- abs(augPairDiff)"
"0","        Xi[j,] <- colMeans(Xcart[which(matchedNumberCart =="
"0","                                         uMatchedSetsCart[j]),], na.rm=TRUE)"
"0","      }"
"0","      if (length(unique(absY))==2){absY <- factor(absY)}"
"0","      "
"0","      colnames(Xi) <- colnames(Xcart)"
"0","      #cartdf <- data.frame(rank(absY), Xi)"
"0","      # factorVars <- colnames(Xi)[-2]  # all variables in XCART but age"
"0","      # Xi[factorVars] <- lapply(Xi[factorVars], factor)"
"0","      cartdf <- data.frame(absY, Xi)"
"0","      "
"0","      # regress rank of |Y| on X"
"0","      #emTree <- rpart(rank.absY.~., data=cartdf, "
"0","      #control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),"
"0","      #model = TRUE)"
"0","      "
"0","      # regres |Y| on X"
"0","      emTree <- rpart(absY~., data=cartdf, "
"0","                      #control =rpart.control(minsplit =20,"
"0","                                             #minbucket=round(minsplit/3),"
"0","                                             #cp=0.001,"
"0","                                             #maxdepth = 10), "
"0","                      model = TRUE)"
"0","    } else {"
"0","      Zcart=Z"
"0","      Rcart=tableDF[c(i)]"
"0","      Xcart=X"
"0","      Dcart=D"
"0","      matchedNumberCart = matchedNumber"
"0","      "
"0","      # drop individuals who weren't matched"
"0","      uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals"
"0","      "
"0","      # get absolute treated-minus-control differences and covariate matrix"
"0","      absY <- numeric(length(uMatchedSetsCart))"
"0","      Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow ="
"0","                                length(uMatchedSetsCart)))"
"0","      for (j in 1:length(uMatchedSetsCart)) {"
"0","        pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ - "
"0","          (pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))"
"0","        absY[j] <- abs(augPairDiff)"
"0","        Xi[j,] <- colMeans(Xcart[which(matchedNumberCart =="
"0","                                         uMatchedSetsCart[j]),], na.rm=TRUE)"
"0","      }"
"0","      if (length(unique(absY))==2){absY <- factor(absY)}"
"0","      colnames(Xi) <- colnames(Xcart)"
"0","      #cartdf <- data.frame(rank(absY), Xi)"
"0","      # factorVars <- colnames(Xi)[-2]  # all variables in XCART but age"
"0","      # Xi[factorVars] <- lapply(Xi[factorVars], factor)"
"0","      cartdf <- data.frame(absY, Xi)"
"0","      "
"0","      # regress rank of |Y| on X"
"0","      #emTree <- rpart(rank.absY.~., data=cartdf, "
"0","      #control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),"
"0","      #model = TRUE)"
"0","      "
"0","      # regres |Y| on X"
"0","      emTree <- rpart(absY~., data=cartdf, "
"0","                      #control =rpart.control(minsplit =20,"
"0","                                             #minbucket=round(minsplit/3),"
"0","                                             #cp=0.001,"
"0","                                             #maxdepth = 10), "
"0","                      model = TRUE)"
"0","    }"
"0","    cartList[[i]] <- emTree"
"0","  }"
"0","  return(cartList)"
"0","}"
"0","##### ListCART: Run CART on abs(Y) on X from rpart on cp=0.0001 and maxdepth=2"
"0","### FUNCTION: outputs list of CART trees from rpart on cp=0.0001 and maxdepth=2"
"0","### INPUT: Z: instrument (n by 1 vector)"
"0","###        tableDF: data frame of the table of responses (n by r)"
"0","###        D: dose (n by 1 vector)"
"0","###        X: covariate matrix (n by p)"
"0","###        matchedNumber: matching vector from matching() function"
"0","###        null: the lambda_0 value in H0: lambda = lambda_0"
"0","### OUTPUT: list of CART trees from rpart on cp=0.0001 and maxdepth=2"
"0","ListCART2 = function(Z,tableDF,D,X,matchedNumber,null = 0){"
"0","  "
"0","  if (class(tableDF) != ""data.frame""){tableDF = as.data.frame(tableDF)}"
"0","  "
"0","  "
"0","  tdfNA <- colnames(tableDF)[colSums(is.na(tableDF)) > 0]  # find which variables have missing values "
"0","  "
"0","  varsWithNA <- tableDF %>% dplyr::select(tdfNA)  # select missing variables"
"0","  "
"0","  # find rows where NA for outcome variable, get pair ID for those rows, "
"0","  # ignore pairs associated with that ID"
"0","  tdfNAid <- lapply(varsWithNA, function(x) which(is.na(x)))  # list of row indices of missingness"
"0","  pairID <- lapply(tdfNAid, function(x) matchedNumber[x])  # list of pair IDs where at least one pair has missing outcome"
"0","  idxPair <- lapply(pairID, function(x) which(matchedNumber %in% x))  # list of row indices of pairs corresponding to a missing outcome value"
"0","  "
"0","  cartList <- list()"
"0","  "
"0","  for (i in colnames(tableDF)) {"
"0","    if (sum(is.na(tableDF[c(i)])) > 0){"
"0","      Zcart=Z[-idxPair[[c(i)]]]"
"0","      Dcart=D[-idxPair[[c(i)]]]"
"0","      Rcart=tableDF[-idxPair[[c(i)]],c(i)]"
"0","      Xcart=as.matrix(X[-idxPair[[c(i)]],])"
"0","      matchedNumberCart = matchedNumber[-idxPair[[c(i)]]]"
"0","      "
"0","      # drop individuals who weren't matched"
"0","      uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals"
"0","      "
"0","      # get absolute treated-minus-control differences and covariate matrix"
"0","      absY <- numeric(length(uMatchedSetsCart))"
"0","      Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow ="
"0","                                length(uMatchedSetsCart)))"
"0","      for (j in 1:length(uMatchedSetsCart)) {"
"0","        pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ - "
"0","          (pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))"
"0","        absY[j] <- abs(augPairDiff)"
"0","        Xi[j,] <- colMeans(Xcart[which(matchedNumberCart =="
"0","                                         uMatchedSetsCart[j]),], na.rm=TRUE)"
"0","      }"
"0","      if (length(unique(absY))==2){absY <- factor(absY)}"
"0","      "
"0","      colnames(Xi) <- colnames(Xcart)"
"0","      #cartdf <- data.frame(rank(absY), Xi)"
"0","      # factorVars <- colnames(Xi)[-2]  # all variables in XCART but age"
"0","      # Xi[factorVars] <- lapply(Xi[factorVars], factor)"
"0","      cartdf <- data.frame(absY, Xi)"
"0","      "
"0","      # regress rank of |Y| on X"
"0","      #emTree <- rpart(rank.absY.~., data=cartdf, "
"0","      #control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),"
"0","      #model = TRUE)"
"0","      "
"0","      # regres |Y| on X"
"0","      emTree <- rpart(absY~., data=cartdf, "
"0","                      control =rpart.control(minsplit =20,"
"0","                                             #minbucket=round(minsplit/3),"
"0","                                             #maxdepth = 10,"
"0","                                             cp=0.005"
"0","                                             ), "
"0","                      model = TRUE)"
"0","    } else {"
"0","      Zcart=Z"
"0","      Rcart=tableDF[c(i)]"
"0","      Xcart=X"
"0","      Dcart=D"
"0","      matchedNumberCart = matchedNumber"
"0","      "
"0","      # drop individuals who weren't matched"
"0","      uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals"
"0","      "
"0","      # get absolute treated-minus-control differences and covariate matrix"
"0","      absY <- numeric(length(uMatchedSetsCart))"
"0","      Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow ="
"0","                                length(uMatchedSetsCart)))"
"0","      for (j in 1:length(uMatchedSetsCart)) {"
"0","        pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ - "
"0","          (pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))"
"0","        absY[j] <- abs(augPairDiff)"
"0","        Xi[j,] <- colMeans(Xcart[which(matchedNumberCart =="
"0","                                         uMatchedSetsCart[j]),], na.rm=TRUE)"
"0","      }"
"0","      if (length(unique(absY))==2){absY <- factor(absY)}"
"0","      colnames(Xi) <- colnames(Xcart)"
"0","      #cartdf <- data.frame(rank(absY), Xi)"
"0","      # factorVars <- colnames(Xi)[-2]  # all variables in XCART but age"
"0","      # Xi[factorVars] <- lapply(Xi[factorVars], factor)"
"0","      cartdf <- data.frame(absY, Xi)"
"0","      "
"0","      # regress rank of |Y| on X"
"0","      #emTree <- rpart(rank.absY.~., data=cartdf, "
"0","      #control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),"
"0","      #model = TRUE)"
"0","      "
"0","      # regres |Y| on X"
"0","      emTree <- rpart(absY~., data=cartdf, "
"0","                      control =rpart.control(minsplit =20,"
"0","                                             #minbucket=round(minsplit/3),"
"0","                                             #maxdepth = 10,"
"0","                                             cp=0.005), "
"0","                      model = TRUE)"
"0","    }"
"0","    cartList[[i]] <- emTree"
"0","  }"
"0","  return(cartList)"
"0","}"
"0","##### ListCART: Run CART on abs(Y) on X from rpart on cp=0.0001 and maxdepth=2"
"0","### FUNCTION: outputs list of CART trees from rpart on cp=0.0001 and maxdepth=2"
"0","### INPUT: Z: instrument (n by 1 vector)"
"0","###        tableDF: data frame of the table of responses (n by r)"
"0","###        D: dose (n by 1 vector)"
"0","###        X: covariate matrix (n by p)"
"0","###        matchedNumber: matching vector from matching() function"
"0","###        null: the lambda_0 value in H0: lambda = lambda_0"
"0","### OUTPUT: list of CART trees from rpart on cp=0.0001 and maxdepth=2"
"0","ListCART3 = function(Z,tableDF,D,X,matchedNumber,null = 0){"
"0","  "
"0","  if (class(tableDF) != ""data.frame""){tableDF = as.data.frame(tableDF)}"
"0","  "
"0","  "
"0","  tdfNA <- colnames(tableDF)[colSums(is.na(tableDF)) > 0]  # find which variables have missing values "
"0","  "
"0","  varsWithNA <- tableDF %>% dplyr::select(tdfNA)  # select missing variables"
"0","  "
"0","  # find rows where NA for outcome variable, get pair ID for those rows, "
"0","  # ignore pairs associated with that ID"
"0","  tdfNAid <- lapply(varsWithNA, function(x) which(is.na(x)))  # list of row indices of missingness"
"0","  pairID <- lapply(tdfNAid, function(x) matchedNumber[x])  # list of pair IDs where at least one pair has missing outcome"
"0","  idxPair <- lapply(pairID, function(x) which(matchedNumber %in% x))  # list of row indices of pairs corresponding to a missing outcome value"
"0","  "
"0","  cartList <- list()"
"0","  "
"0","  for (i in colnames(tableDF)) {"
"0","    if (sum(is.na(tableDF[c(i)])) > 0){"
"0","      Zcart=Z[-idxPair[[c(i)]]]"
"0","      Dcart=D[-idxPair[[c(i)]]]"
"0","      Rcart=tableDF[-idxPair[[c(i)]],c(i)]"
"0","      Xcart=as.matrix(X[-idxPair[[c(i)]],])"
"0","      matchedNumberCart = matchedNumber[-idxPair[[c(i)]]]"
"0","      "
"0","      # drop individuals who weren't matched"
"0","      uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals"
"0","      "
"0","      # get absolute treated-minus-control differences and covariate matrix"
"0","      absY <- numeric(length(uMatchedSetsCart))"
"0","      Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow ="
"0","                                length(uMatchedSetsCart)))"
"0","      for (j in 1:length(uMatchedSetsCart)) {"
"0","        pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ - "
"0","          (pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))"
"0","        absY[j] <- abs(augPairDiff)"
"0","        Xi[j,] <- colMeans(Xcart[which(matchedNumberCart =="
"0","                                         uMatchedSetsCart[j]),], na.rm=TRUE)"
"0","      }"
"0","      if (length(unique(absY))==2){absY <- factor(absY)}"
"0","      "
"0","      colnames(Xi) <- colnames(Xcart)"
"0","      #cartdf <- data.frame(rank(absY), Xi)"
"0","      # factorVars <- colnames(Xi)[-2]  # all variables in XCART but age"
"0","      # Xi[factorVars] <- lapply(Xi[factorVars], factor)"
"0","      cartdf <- data.frame(absY, Xi)"
"0","      "
"0","      # regress rank of |Y| on X"
"0","      #emTree <- rpart(rank.absY.~., data=cartdf, "
"0","      #control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),"
"0","      #model = TRUE)"
"0","      "
"0","      # regres |Y| on X"
"0","      emTree <- rpart(absY~., data=cartdf, "
"0","                      control =rpart.control(minsplit =20,"
"0","                                             #minbucket=round(minsplit/3),"
"0","                                             cp=0.001,"
"0","                                             maxdepth = 10), "
"0","                      model = TRUE)"
"0","    } else {"
"0","      Zcart=Z"
"0","      Rcart=tableDF[c(i)]"
"0","      Xcart=X"
"0","      Dcart=D"
"0","      matchedNumberCart = matchedNumber"
"0","      "
"0","      # drop individuals who weren't matched"
"0","      uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals"
"0","      "
"0","      # get absolute treated-minus-control differences and covariate matrix"
"0","      absY <- numeric(length(uMatchedSetsCart))"
"0","      Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow ="
"0","                                length(uMatchedSetsCart)))"
"0","      for (j in 1:length(uMatchedSetsCart)) {"
"0","        pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ - "
"0","          (pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))"
"0","        absY[j] <- abs(augPairDiff)"
"0","        Xi[j,] <- colMeans(Xcart[which(matchedNumberCart =="
"0","                                         uMatchedSetsCart[j]),], na.rm=TRUE)"
"0","      }"
"0","      if (length(unique(absY))==2){absY <- factor(absY)}"
"0","      colnames(Xi) <- colnames(Xcart)"
"0","      #cartdf <- data.frame(rank(absY), Xi)"
"0","      # factorVars <- colnames(Xi)[-2]  # all variables in XCART but age"
"0","      # Xi[factorVars] <- lapply(Xi[factorVars], factor)"
"0","      cartdf <- data.frame(absY, Xi)"
"0","      "
"0","      # regress rank of |Y| on X"
"0","      #emTree <- rpart(rank.absY.~., data=cartdf, "
"0","      #control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),"
"0","      #model = TRUE)"
"0","      "
"0","      # regres |Y| on X"
"0","      emTree <- rpart(absY~., data=cartdf, "
"0","                      control =rpart.control(minsplit =20,"
"0","                                             #minbucket=round(minsplit/3),"
"0","                                             cp=0.001,"
"0","                                             maxdepth = 10), "
"0","                      model = TRUE)"
"0","    }"
"0","    cartList[[i]] <- emTree"
"0","  }"
"0","  return(cartList)"
"0","}"
"0","##### ListCART: Run CART on abs(Y) on X from rpart on cp=0.0001 and maxdepth=2"
"0","### FUNCTION: outputs list of CART trees from rpart on cp=0.0001 and maxdepth=2"
"0","### INPUT: Z: instrument (n by 1 vector)"
"0","###        tableDF: data frame of the table of responses (n by r)"
"0","###        D: dose (n by 1 vector)"
"0","###        X: covariate matrix (n by p)"
"0","###        matchedNumber: matching vector from matching() function"
"0","###        null: the lambda_0 value in H0: lambda = lambda_0"
"0","### OUTPUT: list of CART trees from rpart on cp=0.0001 and maxdepth=2"
"0","ListCART4 = function(Z,tableDF,D,X,matchedNumber,null = 0){"
"0","  "
"0","  if (class(tableDF) != ""data.frame""){tableDF = as.data.frame(tableDF)}"
"0","  "
"0","  "
"0","  tdfNA <- colnames(tableDF)[colSums(is.na(tableDF)) > 0]  # find which variables have missing values "
"0","  "
"0","  varsWithNA <- tableDF %>% dplyr::select(tdfNA)  # select missing variables"
"0","  "
"0","  # find rows where NA for outcome variable, get pair ID for those rows, "
"0","  # ignore pairs associated with that ID"
"0","  tdfNAid <- lapply(varsWithNA, function(x) which(is.na(x)))  # list of row indices of missingness"
"0","  pairID <- lapply(tdfNAid, function(x) matchedNumber[x])  # list of pair IDs where at least one pair has missing outcome"
"0","  idxPair <- lapply(pairID, function(x) which(matchedNumber %in% x))  # list of row indices of pairs corresponding to a missing outcome value"
"0","  "
"0","  cartList <- list()"
"0","  "
"0","  for (i in colnames(tableDF)) {"
"0","    if (sum(is.na(tableDF[c(i)])) > 0){"
"0","      Zcart=Z[-idxPair[[c(i)]]]"
"0","      Dcart=D[-idxPair[[c(i)]]]"
"0","      Rcart=tableDF[-idxPair[[c(i)]],c(i)]"
"0","      Xcart=as.matrix(X[-idxPair[[c(i)]],])"
"0","      matchedNumberCart = matchedNumber[-idxPair[[c(i)]]]"
"0","      "
"0","      # drop individuals who weren't matched"
"0","      uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals"
"0","      "
"0","      # get absolute treated-minus-control differences and covariate matrix"
"0","      absY <- numeric(length(uMatchedSetsCart))"
"0","      Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow ="
"0","                                length(uMatchedSetsCart)))"
"0","      check <- numeric(length(uMatchedSetsCart))"
"0","      for (j in 1:length(uMatchedSetsCart)) {"
"0","        check[j] <- length(which(matchedNumberCart==uMatchedSetsCart[j]))"
"0","        pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ - "
"0","          (pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))"
"0","        absY[j] <- abs(augPairDiff)"
"0","        Xi[j,] <- colMeans(Xcart[which(matchedNumberCart =="
"0","                                         uMatchedSetsCart[j]),], na.rm=TRUE)"
"0","      }"
"0","      if (length(unique(absY))==2){absY <- factor(absY)}"
"0","      "
"0","      colnames(Xi) <- colnames(Xcart)"
"0","      #cartdf <- data.frame(rank(absY), Xi)"
"0","      # factorVars <- colnames(Xi)[-2]  # all variables in XCART but age"
"0","      # Xi[factorVars] <- lapply(Xi[factorVars], factor)"
"0","      cartdf <- data.frame(absY, Xi)"
"0","      "
"0","      # regress rank of |Y| on X"
"0","      #emTree <- rpart(rank.absY.~., data=cartdf, "
"0","      #control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),"
"0","      #model = TRUE)"
"0","      "
"0","      # regres |Y| on X"
"0","      emTree <- rpart(absY~., data=cartdf, "
"0","                      control =rpart.control(minsplit =20,"
"0","                                             #minbucket=round(minsplit/3),"
"0","                                             cp=0.0001,"
"0","                                             maxdepth = 5), "
"0","                      model = TRUE)"
"0","    } else {"
"0","      Zcart=Z"
"0","      Rcart=tableDF[c(i)]"
"0","      Xcart=X"
"0","      Dcart=D"
"0","      matchedNumberCart = matchedNumber"
"0","      "
"0","      # drop individuals who weren't matched"
"0","      uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals"
"0","      "
"0","      # get absolute treated-minus-control differences and covariate matrix"
"0","      absY <- numeric(length(uMatchedSetsCart))"
"0","      Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow ="
"0","                                length(uMatchedSetsCart)))"
"0","      for (j in 1:length(uMatchedSetsCart)) {"
"0","        pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ - "
"0","          (pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))"
"0","        absY[j] <- abs(augPairDiff)"
"0","        Xi[j,] <- colMeans(Xcart[which(matchedNumberCart =="
"0","                                         uMatchedSetsCart[j]),], na.rm=TRUE)"
"0","      }"
"0","      if (length(unique(absY))==2){absY <- factor(absY)}"
"0","      colnames(Xi) <- colnames(Xcart)"
"0","      #cartdf <- data.frame(rank(absY), Xi)"
"0","      # factorVars <- colnames(Xi)[-2]  # all variables in XCART but age"
"0","      # Xi[factorVars] <- lapply(Xi[factorVars], factor)"
"0","      cartdf <- data.frame(absY, Xi)"
"0","      "
"0","      # regress rank of |Y| on X"
"0","      #emTree <- rpart(rank.absY.~., data=cartdf, "
"0","      #control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),"
"0","      #model = TRUE)"
"0","      "
"0","      # regres |Y| on X"
"0","      emTree <- rpart(absY~., data=cartdf, "
"0","                      control =rpart.control(minsplit =20,"
"0","                                             #minbucket=round(minsplit/3),"
"0","                                             cp=0.0001,"
"0","                                             maxdepth = 5), "
"0","                      model = TRUE)"
"0","    }"
"0","    cartList[[i]] <- emTree"
"0","  }"
"0","  return(cartList)"
"0","}"
"0","##### ListCART: Run CART on abs(Y) on X from rpart on cp=0.0001 and maxdepth=2"
"0","### FUNCTION: outputs list of CART trees from rpart on cp=0.0001 and maxdepth=2"
"0","### INPUT: Z: instrument (n by 1 vector)"
"0","###        tableDF: data frame of the table of responses (n by r)"
"0","###        D: dose (n by 1 vector)"
"0","###        X: covariate matrix (n by p)"
"0","###        matchedNumber: matching vector from matching() function"
"0","###        null: the lambda_0 value in H0: lambda = lambda_0"
"0","### OUTPUT: list of CART trees from rpart on cp=0.0001 and maxdepth=2"
"0","ListCART5 = function(Z,tableDF,D,X,matchedNumber,null = 0){"
"0","  "
"0","  if (class(tableDF) != ""data.frame""){tableDF = as.data.frame(tableDF)}"
"0","  "
"0","  "
"0","  tdfNA <- colnames(tableDF)[colSums(is.na(tableDF)) > 0]  # find which variables have missing values "
"0","  "
"0","  varsWithNA <- tableDF %>% dplyr::select(tdfNA)  # select missing variables"
"0","  "
"0","  # find rows where NA for outcome variable, get pair ID for those rows, "
"0","  # ignore pairs associated with that ID"
"0","  tdfNAid <- lapply(varsWithNA, function(x) which(is.na(x)))  # list of row indices of missingness"
"0","  pairID <- lapply(tdfNAid, function(x) matchedNumber[x])  # list of pair IDs where at least one pair has missing outcome"
"0","  idxPair <- lapply(pairID, function(x) which(matchedNumber %in% x))  # list of row indices of pairs corresponding to a missing outcome value"
"0","  "
"0","  cartList <- list()"
"0","  "
"0","  for (i in colnames(tableDF)) {"
"0","    if (sum(is.na(tableDF[c(i)])) > 0){"
"0","      Zcart=Z[-idxPair[[c(i)]]]"
"0","      Dcart=D[-idxPair[[c(i)]]]"
"0","      Rcart=tableDF[-idxPair[[c(i)]],c(i)]"
"0","      Xcart=as.matrix(X[-idxPair[[c(i)]],])"
"0","      matchedNumberCart = matchedNumber[-idxPair[[c(i)]]]"
"0","      "
"0","      # drop individuals who weren't matched"
"0","      uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals"
"0","      "
"0","      # get absolute treated-minus-control differences and covariate matrix"
"0","      absY <- numeric(length(uMatchedSetsCart))"
"0","      Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow ="
"0","                                length(uMatchedSetsCart)))"
"0","      check <- numeric(length(uMatchedSetsCart))"
"0","      for (j in 1:length(uMatchedSetsCart)) {"
"0","        check[j] <- length(which(matchedNumberCart==uMatchedSetsCart[j]))"
"0","        pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ - "
"0","          (pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))"
"0","        absY[j] <- abs(augPairDiff)"
"0","        Xi[j,] <- colMeans(Xcart[which(matchedNumberCart =="
"0","                                         uMatchedSetsCart[j]),], na.rm=TRUE)"
"0","      }"
"0","      if (length(unique(absY))==2){absY <- factor(absY)}"
"0","      "
"0","      colnames(Xi) <- colnames(Xcart)"
"0","      #cartdf <- data.frame(rank(absY), Xi)"
"0","      # factorVars <- colnames(Xi)[-2]  # all variables in XCART but age"
"0","      # Xi[factorVars] <- lapply(Xi[factorVars], factor)"
"0","      cartdf <- data.frame(absY, Xi)"
"0","      "
"0","      # regress rank of |Y| on X"
"0","      #emTree <- rpart(rank.absY.~., data=cartdf, "
"0","      #control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),"
"0","      #model = TRUE)"
"0","      "
"0","      # regres |Y| on X"
"0","      emTree <- rpart(absY~., data=cartdf, "
"0","                      control =rpart.control(minsplit =20,"
"0","                                             #minbucket=round(minsplit/3),"
"0","                                             cp=0.0001,"
"0","                                             maxdepth = 4), "
"0","                      model = TRUE)"
"0","    } else {"
"0","      Zcart=Z"
"0","      Rcart=tableDF[c(i)]"
"0","      Xcart=X"
"0","      Dcart=D"
"0","      matchedNumberCart = matchedNumber"
"0","      "
"0","      # drop individuals who weren't matched"
"0","      uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals"
"0","      "
"0","      # get absolute treated-minus-control differences and covariate matrix"
"0","      absY <- numeric(length(uMatchedSetsCart))"
"0","      Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow ="
"0","                                length(uMatchedSetsCart)))"
"0","      for (j in 1:length(uMatchedSetsCart)) {"
"0","        pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ - "
"0","          (pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))"
"0","        absY[j] <- abs(augPairDiff)"
"0","        Xi[j,] <- colMeans(Xcart[which(matchedNumberCart =="
"0","                                         uMatchedSetsCart[j]),], na.rm=TRUE)"
"0","      }"
"0","      if (length(unique(absY))==2){absY <- factor(absY)}"
"0","      colnames(Xi) <- colnames(Xcart)"
"0","      #cartdf <- data.frame(rank(absY), Xi)"
"0","      # factorVars <- colnames(Xi)[-2]  # all variables in XCART but age"
"0","      # Xi[factorVars] <- lapply(Xi[factorVars], factor)"
"0","      cartdf <- data.frame(absY, Xi)"
"0","      "
"0","      # regress rank of |Y| on X"
"0","      #emTree <- rpart(rank.absY.~., data=cartdf, "
"0","      #control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),"
"0","      #model = TRUE)"
"0","      "
"0","      # regres |Y| on X"
"0","      emTree <- rpart(absY~., data=cartdf, "
"0","                      control =rpart.control(minsplit =20,"
"0","                                             #minbucket=round(minsplit/3),"
"0","                                             cp=0.0001,"
"0","                                             maxdepth = 4), "
"0","                      model = TRUE)"
"0","    }"
"0","    cartList[[i]] <- emTree"
"0","  }"
"0","  return(cartList)"
"0","}"
"0","##### ListCART: Run CART on abs(Y) on X from rpart on cp=0.0001 and maxdepth=2"
"0","### FUNCTION: outputs list of CART trees from rpart on cp=0.0001 and maxdepth=2"
"0","### INPUT: Z: instrument (n by 1 vector)"
"0","###        tableDF: data frame of the table of responses (n by r)"
"0","###        D: dose (n by 1 vector)"
"0","###        X: covariate matrix (n by p)"
"0","###        matchedNumber: matching vector from matching() function"
"0","###        null: the lambda_0 value in H0: lambda = lambda_0"
"0","### OUTPUT: list of CART trees from rpart on cp=0.0001 and maxdepth=2"
"0","ListCART6 = function(Z,tableDF,D,X,matchedNumber,null = 0){"
"0","  "
"0","  if (class(tableDF) != ""data.frame""){tableDF = as.data.frame(tableDF)}"
"0","  "
"0","  "
"0","  tdfNA <- colnames(tableDF)[colSums(is.na(tableDF)) > 0]  # find which variables have missing values "
"0","  "
"0","  varsWithNA <- tableDF %>% dplyr::select(tdfNA)  # select missing variables"
"0","  "
"0","  # find rows where NA for outcome variable, get pair ID for those rows, "
"0","  # ignore pairs associated with that ID"
"0","  tdfNAid <- lapply(varsWithNA, function(x) which(is.na(x)))  # list of row indices of missingness"
"0","  pairID <- lapply(tdfNAid, function(x) matchedNumber[x])  # list of pair IDs where at least one pair has missing outcome"
"0","  idxPair <- lapply(pairID, function(x) which(matchedNumber %in% x))  # list of row indices of pairs corresponding to a missing outcome value"
"0","  "
"0","  cartList <- list()"
"0","  "
"0","  for (i in colnames(tableDF)) {"
"0","    if (sum(is.na(tableDF[c(i)])) > 0){"
"0","      Zcart=Z[-idxPair[[c(i)]]]"
"0","      Dcart=D[-idxPair[[c(i)]]]"
"0","      Rcart=tableDF[-idxPair[[c(i)]],c(i)]"
"0","      Xcart=as.matrix(X[-idxPair[[c(i)]],])"
"0","      matchedNumberCart = matchedNumber[-idxPair[[c(i)]]]"
"0","      "
"0","      # drop individuals who weren't matched"
"0","      uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals"
"0","      "
"0","      # get absolute treated-minus-control differences and covariate matrix"
"0","      absY <- numeric(length(uMatchedSetsCart))"
"0","      Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow ="
"0","                                length(uMatchedSetsCart)))"
"0","      check <- numeric(length(uMatchedSetsCart))"
"0","      for (j in 1:length(uMatchedSetsCart)) {"
"0","        check[j] <- length(which(matchedNumberCart==uMatchedSetsCart[j]))"
"0","        pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ - "
"0","          (pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))"
"0","        absY[j] <- abs(augPairDiff)"
"0","        Xi[j,] <- colMeans(Xcart[which(matchedNumberCart =="
"0","                                         uMatchedSetsCart[j]),], na.rm=TRUE)"
"0","      }"
"0","      if (length(unique(absY))==2){absY <- factor(absY)}"
"0","      "
"0","      colnames(Xi) <- colnames(Xcart)"
"0","      #cartdf <- data.frame(rank(absY), Xi)"
"0","      # factorVars <- colnames(Xi)[-2]  # all variables in XCART but age"
"0","      # Xi[factorVars] <- lapply(Xi[factorVars], factor)"
"0","      cartdf <- data.frame(absY, Xi)"
"0","      "
"0","      # regress rank of |Y| on X"
"0","      #emTree <- rpart(rank.absY.~., data=cartdf, "
"0","      #control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),"
"0","      #model = TRUE)"
"0","      "
"0","      # regres |Y| on X"
"0","      emTree <- rpart(absY~., data=cartdf, "
"0","                      control =rpart.control(minsplit =20,"
"0","                                             #minbucket=round(minsplit/3),"
"0","                                             cp=0.0001,"
"0","                                             maxdepth = 3), "
"0","                      model = TRUE)"
"0","    } else {"
"0","      Zcart=Z"
"0","      Rcart=tableDF[c(i)]"
"0","      Xcart=X"
"0","      Dcart=D"
"0","      matchedNumberCart = matchedNumber"
"0","      "
"0","      # drop individuals who weren't matched"
"0","      uMatchedSetsCart = unique(matchedNumberCart[!is.na(matchedNumberCart)])  # guarantee no unmatched individuals"
"0","      "
"0","      # get absolute treated-minus-control differences and covariate matrix"
"0","      absY <- numeric(length(uMatchedSetsCart))"
"0","      Xi <- data.frame(matrix(0, ncol = dim(Xcart)[2], nrow ="
"0","                                length(uMatchedSetsCart)))"
"0","      for (j in 1:length(uMatchedSetsCart)) {"
"0","        pairR <- Rcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairZ <- Zcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        pairD <- Dcart[which(matchedNumberCart==uMatchedSetsCart[j])]"
"0","        augPairDiff <- pairR %*% pairZ - null * pairD %*% pairZ - "
"0","          (pairR %*% (1-pairZ) - null * pairD %*% (1-pairZ))"
"0","        absY[j] <- abs(augPairDiff)"
"0","        Xi[j,] <- colMeans(Xcart[which(matchedNumberCart =="
"0","                                         uMatchedSetsCart[j]),], na.rm=TRUE)"
"0","      }"
"0","      if (length(unique(absY))==2){absY <- factor(absY)}"
"0","      colnames(Xi) <- colnames(Xcart)"
"0","      #cartdf <- data.frame(rank(absY), Xi)"
"0","      # factorVars <- colnames(Xi)[-2]  # all variables in XCART but age"
"0","      # Xi[factorVars] <- lapply(Xi[factorVars], factor)"
"0","      cartdf <- data.frame(absY, Xi)"
"0","      "
"0","      # regress rank of |Y| on X"
"0","      #emTree <- rpart(rank.absY.~., data=cartdf, "
"0","      #control =rpart.control(minsplit =1,minbucket=1, cp=0,maxdepth = 5),"
"0","      #model = TRUE)"
"0","      "
"0","      # regres |Y| on X"
"0","      emTree <- rpart(absY~., data=cartdf, "
"0","                      control =rpart.control(minsplit =20,"
"0","                                             #minbucket=round(minsplit/3),"
"0","                                             cp=0.0001,"
"0","                                             maxdepth = 3), "
"0","                      model = TRUE)"
"0","    }"
"0","    cartList[[i]] <- emTree"
"0","  }"
"0","  return(cartList)"
"0","}"
